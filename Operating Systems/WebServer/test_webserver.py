# 1. web server under construction
# 2. other than get is invalid request response with error code
# 3. /index.html, match contents.
# 4. list of directory with files and folders. (html template for printing)
# 5. Handling threads

# 1. /scripts/file.py, check for the output
# 2. /file.py, other than scripts folder
# 3. /scripts/file.py, checking with the parameters in the uri
# 4. /scripts/file.py, infinite loop checking
# 5. Handling threads

# -*- coding: utf-8 -*-
"""Test_webserver.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1--N3SeVNrh6fSAK77MMzrbz-m-MQu6V3
@author Praveen Garimella
@author Laxmi Narayana Murthy
@author Deepak Kumar Reddy
@author Vipul
@author Siva Sankar
"""

# import statements here.
import requests

# update the values according to your ip and port number.
host = "127.0.0.1"
port = "1239"
url = "http://" + host + ":" + port + "/"
file_name = "index.html"
print (url)

# driver to run all testcases
def Testcase(r, expstatuscode, expcontenttype, exptext, count):
    print("-----TestCase-" , count, "-----")
    if r.status_code != expstatuscode:
        print (r.status_code, " :: " , expstatuscode)
        print("Wrong status code")
        return False
    if r.headers['Content-Type'] != expcontenttype:
        print("Wrong content-type")
        return False
    if r.text != exptext:
        print("Wrong content")
        return False
    return True

# Test case
# give your local host and port number here.

# Testcase 1: Checking whether your server is handling requests or not.
# if it handle requests, the default response should be 
# <h1>Webserver Under construction</h1>
# This response should only be sent when the variable 
#enable_directory_browsing is set to False
r = requests.get(url)
print()
# print(r.headers)
# print(r.status_code)
# print(r.text)
if Testcase(r, 200, "text/html", "<h1>Webserver Under construction</h1>", 1):
	print("TestCase-1 passed")
else:
	print("TestCase-1 Failed")


# Make sure your tiny web server should handle only GET request method.
# The following test case is to send the request other than GET. 
# Generate a response, <h1>The Server can serve only GET method.</h1>
params = {'user_name' : "Bob"}
r = requests.post(url + "scripts/get_user_details.py', data = param")
print()
if Testcase(r, 405, "text/html", "<h1>Bad request method</h1>", 2):
    print("TestCase-2 passed")
else:
	print("TestCase-2 Failed")

# trying to request using the delete request method...
r = requests.delete(url + "scripts/index.html")
print()
if Testcase(r, 405, "text/html", "<h1>Bad request method</h1>", 3):
    print("TestCase-3 passed")
else:
	print("TestCase-3 Failed")

# trying to request using the head request method...
r = requests.head(url + "index.html")
print()
if Testcase(r, 405, "text/html", "", 4):
    print("TestCase-4 passed")
else:
	print("TestCase-4 Failed")

# trying to request using the put request method...
r = requests.put(url + "index.html")
print()
if Testcase(r, 405, "text/html", "<h1>Bad request method</h1>", 5):
    print("TestCase-5 passed")
else:
	print("TestCase-5 Failed")


# Getting the content of index.html
print()
r = requests.get(url + "index.html")
if Testcase(r, 200, "text/html", "<h1>Welcome to tiny web server</h1>",6):
    print("TestCase-6 passed")
else:
	print("TestCase-6 Failed")


# Getting the content of some random file which is not available on the DOC_ROOT
print()
r = requests.get(url + "Error.html")
if Testcase(r, 404, "text/html", "<h1>File Not Found</h1>",7):
    print("TestCase-7 passed")
else:
	print("TestCase-7 Failed")

# Trying to request the resource which is not available with the server (DOC_ROOT)
r = requests.get(url + "scripts/resource_not_found.py")
print()
if Testcase(r, 404, "text/html", "<h1>File Not Found</h1>",8):
    print("TestCase-8 passed")
else:
	print("TestCase-8 Failed")

# Trying to execute the scirpts file and it is expecting the query parameters
# Generate a status code with 409 and send an error without serving the request
r = requests.get(url + "scripts/odd.py")
print()
if Testcase(r, 409, "text/html", "expecting arguments to serve the request...", 9):
    print("TestCase-9 passed")
else:
	print("TestCase-9 Failed")


# Executing the python script file that generates the odd numbers between 1 and 
# the parameter that you append to the uri
r = requests.get(url + "scripts/odd.py?n=20")
print()
if Testcase(r, 200, "text/html", "<h1>Output is as follows</h1><br><br><h3>1,3,5,7,9,11,13,15,17,19</h1", 9):
    print("TestCase-9 passed")
else:
	print("TestCase-9 Failed")

print()
